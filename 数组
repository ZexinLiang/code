#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<windows.h>
#include<stdlib.h>
#include<time.h>

//数组

//一维数组的创建及其初始化

//int main()
//{
//	//创建一个数组存放十个整形
//	int arr1[10];
//	//数组的初始化
//	int arr2[10] = { 1,2,3 };//不完全初始化
//	char arr3[] = { 'a','b',98 };//98默认为一ASCII码值
//	char arr4[5] = "ab";//这种也ok，比上面的写法多了一个\0
//	printf("%d\n", sizeof(arr4));//计算变量，数组，类型的大小--单位是字节
//	printf("%d\n", strlen(arr4));//strlen只能求字符串长度
//	printf("%d\n", strlen(arr3));//strlen没有遇到\0输出一个随机值
//	printf("%d\n", sizeof(arr2));
//	return 0;
//}

//访问一维数组中的元素

//int main()
//{
//	char arr[] = "abcdef";
//	//单个访问
//	printf("%c\n", arr[3]);
//	//连续访问同一数组中元素
//	int i = 0;
//	int len = strlen(arr);
//	for (i = 0; i < len; i++)
//		printf("%c", arr[i]);
//	return 0;
//}

//一维数组在内存中的存储

//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	char arr1[] = "abcdefg";
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%p\n", &arr[i]);
//	}
//	printf("\n");
//	int sz1 = sizeof(arr1) / sizeof(arr1[0]);
//	for (i = 0; i < sz1; i++)
//	{
//		printf("%p\n", &arr1[i]);
//	}
//	return 0;
//}

//二维数组的创建及其初始化与访问

//int main()
//{
//	int arr[3][4];//表示该数组有三行四列
//	char ch[5][6];
//	//初始化
//	int arr1[3][4] = { 1,2,3,4,5 };//不完全初始化，一行放满后来到第二行
//	int arr2[3][4] = { {1,2,3},{4,5} };//第一行1230；第二行4500
//	//不可写成arr2[][]，arr2[3][]，但可以写成arr2[][4]，即行可以省略列不能省略
//	//打印arr2中所有元素
//	int i = 0;
//	int j = 0;
//	for (i = 0; i < 3; i++)
//	{
//		for (j = 0; j < 4; j++)
//		{
//			printf("%d ", arr2[i][j]);
//		}
//		printf("\n");
//	}
//	return 0;
//}

//二维数组在内存中的存储

//int main()
//{
//	int arr2[3][4] = { {1,2,3},{4,5} };
//	int i = 0;
//	int j = 0;
//	for (i = 0; i < 3; i++)
//	{
//		for (j = 0; j < 4; j++)
//		{
//			printf("&arr2[%d][%d] = %p ", i, j, &arr2[i][j]);
//		}
//		printf("\n");
//	}
//	return 0;
//}
////存储规律，由行到列逐个依次连续储存

//数组越界访问

//int main()
//{
//	int arr[6] = { 1,2,3,4,5,6 };
//	int i = 0;
//	for (i = 0; i < 10; i++)//超出了数组的大小
//		printf("%d ", arr[i]);//越界访问后打印随机值，该代码错误，但编译器不报错
//	int arr0[3][4] = { 1,2,3,4,5,6,7,8,9,10,11,12 };
//	int j = 0;
//	//二维数组越界
//	printf("\n");
//	for (i = 0; i < 3; i++)
//	{
//		for (j = 0; j <= 4; j++)
//		{
//			printf("%d ", arr0[i][j]);
//		}
//		printf("\n");
//	}
//	return 0;
//}

//数组作为函数参数

//冒号排序函数的设计
////两种写法1.数组名int arr[]2.指针int* arr
//void bubble_sort(int* arr, int sz)
//{
//	int i = 0;
//	int j = 0;
//	for (i = 0; i < sz - 1 ; i++)
//	{
//		for (j = 0; j < sz - 1; j++)
//		{
//			if (arr[j] > arr[j + 1])
//			{
//				int tmp = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = tmp;
//			}
//		}
//	}
//}
//int main()
//{
//	int arr[] = { 9,8,89,5,5,55555,7,5,61,0 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	bubble_sort(arr, sz);
//	for (int p = 0; p <= sz - 1; p++)
//	{
//		printf("%d ", arr[p]);
//	}
//	return 0;
//}

//数组名

//一维数组数组名
//int main()
//{
//	int arr[10];
//	printf("%p\n", arr);
//	printf("%p\n", &arr[0]);
//	printf("%p\n", &arr);
//	int n = sizeof(arr);
//	printf("%d\n", n);//数组名确实能表示首元素地址，但是又有两个例外
//	//1.sizeof(arr)求的是整个数组
//	//2.&arr，这里的数组名也是表示整个数组，取出整个数组的地址
//	printf("\n");
//	printf("%p\n", arr);
//	printf("%p\n", arr + 1);
//	printf("-----------------\n");
//	printf("%p\n", &arr[0]);
//	printf("%p\n", &arr[0] + 1);
//	printf("-----------------\n");
//	printf("%p\n", &arr);
//	printf("%p\n", &arr + 1);
//	return 0;
//}
//二维数组数组名
//int main()
//{
//	int arr[3][4];
//	//int sz = sizeof(arr);
//	//printf("%d\n", sz);
//	//二维数组数组名也表示首元素地址，即首行地址
//	printf("%p\n", arr);
//	printf("%p\n", arr + 1);//+1即下一行
//	//通过计算得到几行几列
//	int h = sizeof(arr) / sizeof(arr[0]);
//	printf("%d\n", h);
//	int l = sizeof(arr[0]) / sizeof(arr[0][0]);
//	printf("%d\n", l);
//	return 0;
//}

